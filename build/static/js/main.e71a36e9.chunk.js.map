{"version":3,"sources":["img/main-avatar.svg","img/skills.png","img/career-goals.png","img/past-exp.png","img/current-projects.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","theme","global","font","family","size","height","App","Grommet","Nav","direction","background","pad","justify","Box","align","gap","Image","src","avatar","margin","Heading","Text","Anchor","icon","Linkedin","href","target","hoverIndicator","color","Github","Grid","Card","CardHeader","CardBody","fit","skills","goals","past_exp","current_proj","Footer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,0C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,8C,kVCSrCC,EAAQ,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,UAwDCC,EAnDH,WACV,OACI,kBAACC,EAAA,EAAD,CAASP,MAAOA,GACZ,kBAACQ,EAAA,EAAD,CAAKC,UAAU,MAAMC,WAAW,iBAAiBC,IAAI,SAASC,QAAS,WACnE,kBAACC,EAAA,EAAD,CAAKJ,UAAU,MAAMG,QAAQ,QAAQE,MAAM,SAASC,IAAI,UACpD,kBAACC,EAAA,EAAD,CAAOZ,KAAK,SAASa,IAAKC,MAC1B,kBAACL,EAAA,EAAD,CAAKJ,UAAW,SAAUE,IAAK,SAAUQ,OAAQ,UAC7C,kBAACC,EAAA,EAAD,uBACA,kBAACC,EAAA,EAAD,uMAGR,kBAACR,EAAA,EAAD,CAAKD,QAAQ,MAAMH,UAAU,OACzB,kBAACa,EAAA,EAAD,CAAQC,KAAM,kBAACC,EAAA,EAAD,CAAUpB,KAAK,WAAaqB,KAAK,uDAAuDC,OAAO,SAASC,gBAAc,EAACC,MAAO,WAC5I,kBAACN,EAAA,EAAD,CAAQC,KAAM,kBAACM,EAAA,EAAD,CAAQzB,KAAK,WAAaqB,KAAK,mCAAmCC,OAAO,SAASC,gBAAc,EAACC,MAAO,aAG9H,kBAACE,EAAA,EAAD,CAAMX,OAAO,QACT,kBAACN,EAAA,EAAD,CAAKJ,UAAW,iBAAkBJ,OAAQ,SAAUU,IAAK,SAAUH,QAAS,UACxE,kBAACmB,EAAA,EAAD,CAAMrB,WAAW,WACb,kBAACsB,EAAA,EAAD,CAAYrB,IAAI,UAAS,uCACzB,kBAACsB,EAAA,EAAD,CAAUtB,IAAI,UACV,kBAACK,EAAA,EAAD,CAAOkB,IAAK,UAAWjB,IAAKkB,QAGpC,kBAACJ,EAAA,EAAD,CAAMrB,WAAW,WACb,kBAACsB,EAAA,EAAD,CAAYrB,IAAI,UAAS,6CACzB,kBAACsB,EAAA,EAAD,CAAUtB,IAAI,UACV,kBAACK,EAAA,EAAD,CAAOkB,IAAK,UAAWjB,IAAKmB,QAGpC,kBAACL,EAAA,EAAD,CAAMrB,WAAW,WACb,kBAACsB,EAAA,EAAD,CAAYrB,IAAI,UAAS,gDACzB,kBAACsB,EAAA,EAAD,CAAUtB,IAAI,UACV,kBAACK,EAAA,EAAD,CAAOkB,IAAK,UAAWjB,IAAKoB,QAGpC,kBAACN,EAAA,EAAD,CAAMrB,WAAW,WACb,kBAACsB,EAAA,EAAD,CAAYrB,IAAI,UAAS,iDACzB,kBAACsB,EAAA,EAAD,CAAUtB,IAAI,UACV,kBAACK,EAAA,EAAD,CAAOkB,IAAK,UAAWjB,IAAKqB,UAK5C,kBAACC,EAAA,EAAD,CAAQ7B,WAAW,iBAAiBC,IAAI,SACpC,gECpDM6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e71a36e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-avatar.d17433e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills.8c177e59.png\";","module.exports = __webpack_public_path__ + \"static/media/career-goals.4c536cba.png\";","module.exports = __webpack_public_path__ + \"static/media/past-exp.074f2b08.png\";","module.exports = __webpack_public_path__ + \"static/media/current-projects.6d705171.png\";","import React from 'react';\nimport { Grommet, Nav, Footer, Grid, Anchor, Box, Text, Heading, Avatar, Card, CardHeader, CardBody, Image, Button } from 'grommet';\nimport { Linkedin, Github } from 'grommet-icons';\nimport avatar from './img/main-avatar.svg';\nimport skills from './img/skills.png';\nimport goals from './img/career-goals.png';\nimport past_exp from './img/past-exp.png';\nimport current_proj from './img/current-projects.png'\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n      <Grommet theme={theme}>\n          <Nav direction=\"row\" background=\"status-warning\" pad=\"medium\" justify={\"between\"}>\n              <Box direction=\"row\" justify=\"start\" align=\"center\" gap=\"medium\">\n                  <Image size=\"xlarge\" src={avatar} />\n                  <Box direction={\"column\"} pad={\"medium\"} margin={\"medium\"}>\n                      <Heading>Ravi Jayaraman</Heading>\n                      <Text>I'm an aspiring web designer portraying my story through illustrations. Currently living and working in Sydney, Australia. Explore more about me through my website and get in touch with me</Text>\n                  </Box>\n              </Box>\n              <Box justify=\"end\" direction=\"row\">\n                  <Anchor icon={<Linkedin size='xlarge' />} href=\"https://www.linkedin.com/in/ravi-jayaraman-527b2183/\" target=\"_blank\" hoverIndicator color={\"dark-1\"}/>\n                  <Anchor icon={<Github size='xlarge' />} href=\"https://github.com/ravijayaraman\" target=\"_blank\" hoverIndicator color={\"dark-1\"}/>\n              </Box>\n          </Nav>\n          <Grid margin=\"20px\">\n              <Box direction={\"row-responsive\"} height={\"medium\"} gap={\"medium\"} justify={\"center\"}>\n                  <Card background=\"light-1\">\n                      <CardHeader pad=\"medium\"><h2>Skills</h2></CardHeader>\n                      <CardBody pad=\"medium\">\n                          <Image fit={\"contain\"} src={skills} />\n                      </CardBody>\n                  </Card>\n                  <Card background=\"light-1\">\n                      <CardHeader pad=\"medium\"><h2>Career Goals</h2></CardHeader>\n                      <CardBody pad=\"medium\">\n                          <Image fit={\"contain\"} src={goals}/>\n                      </CardBody>\n                  </Card>\n                  <Card background=\"light-1\">\n                      <CardHeader pad=\"medium\"><h2>Past Experience</h2></CardHeader>\n                      <CardBody pad=\"medium\">\n                          <Image fit={\"contain\"} src={past_exp}/>\n                      </CardBody>\n                  </Card>\n                  <Card background=\"light-1\">\n                      <CardHeader pad=\"medium\"><h2>Current Projects</h2></CardHeader>\n                      <CardBody pad=\"medium\">\n                          <Image fit={\"contain\"} src={current_proj}/>\n                      </CardBody>\n                  </Card>\n              </Box>\n          </Grid>\n          <Footer background=\"status-warning\" pad=\"small\">\n              <h3>Copyright Â© Ravi Jayaraman</h3>\n          </Footer>\n      </Grommet>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}