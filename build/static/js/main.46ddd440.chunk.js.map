{"version":3,"sources":["img/main-avatar.svg","img/skills.png","img/career-goals.png","img/past-exp.png","img/current-projects.png","components/cardDetails.js","components/navigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CardDetails","props","Card","background","class","margin","DataTable","columns","property","header","Text","primary","render","datum","Box","pad","vertical","Meter","values","value","percent","thickness","size","data","name","this","title","src","image","React","Component","NavigationBar","Nav","direction","justify","align","gap","Image","avatar","Heading","Anchor","icon","Linkedin","href","target","hoverIndicator","color","Github","theme","global","font","family","height","App","Grommet","skills","goals","past_exp","current_proj","Footer","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46ddd440.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/main-avatar.d17433e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/skills.8c177e59.png\";","module.exports = __webpack_public_path__ + \"static/media/career-goals.4c536cba.png\";","module.exports = __webpack_public_path__ + \"static/media/past-exp.074f2b08.png\";","module.exports = __webpack_public_path__ + \"static/media/current-projects.6d705171.png\";","import React  from 'react';\nimport { Card, Text, Box, DataTable, Meter } from 'grommet';\nimport {Swift, Js, Reactjs, Node} from \"grommet-icons\";\n\nclass CardDetails extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return(\n            <Card background=\"light-1\">\n                <div class=\"card-details-container\">\n                    <div class=\"overlay\">\n                        <Card margin={\"20px\"}>\n                            <DataTable\n                                columns={[\n                                    {\n                                        property: 'name',\n                                        header: <Text>Skill</Text>,\n                                        primary: true,\n                                    },\n                                    {\n                                        property: 'percent',\n                                        header: 'Level',\n                                        render: datum => (\n                                            <Box pad={{ vertical: 'xsmall' }}>\n                                                <Meter\n                                                    values={[{ value: datum.percent }]}\n                                                    thickness=\"small\"\n                                                    size=\"small\"\n                                                />\n                                            </Box>\n                                        ),\n                                    },\n                                ]}\n                                data={[\n                                    { name: 'Swift', percent: 80 },\n                                    { name: 'Node', percent: 60 },\n                                    { name: 'JavaScript', percent: 70 },\n                                    { name: 'ReactJS', percent: 40 },\n                                    { name: 'MongoDB', percent: 90 },\n                                    { name: 'Docker', percent: 60 },\n                                ]}\n                            />\n                        </Card>\n                    </div>\n                    <div>\n                        <h2>{this.props.title}</h2>\n                    </div>\n                    <div>\n                        <img class=\"card-detail-image\" src={this.props.image}/>\n                    </div>\n                </div>\n            </Card>\n        );\n    }\n}\n\nexport default CardDetails;","import {Anchor, Box, Heading, Image, Nav, Text} from \"grommet\";\nimport React from \"react\";\n\nimport avatar from \"../img/main-avatar.svg\";\nimport {Github, Linkedin} from \"grommet-icons\";\n\nclass NavigationBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return(\n            <Nav direction=\"row\" background=\"status-warning\" pad=\"medium\" justify={\"between\"}>\n                <Box direction=\"row\" justify=\"start\" align=\"center\" gap=\"medium\">\n                    <Image size=\"xlarge\" src={avatar} />\n                    <Box direction={\"column\"} pad={\"medium\"} margin={\"medium\"}>\n                        <Heading>Ravi Jayaraman</Heading>\n                        <Text>I'm an aspiring web designer portraying my story through illustrations. Currently living and working in Sydney, Australia. Explore more about me through my website and get in touch with me</Text>\n                    </Box>\n                </Box>\n                <Box justify=\"end\" direction=\"row\">\n                    <Anchor icon={<Linkedin size='xlarge' />} href=\"https://www.linkedin.com/in/ravi-jayaraman-527b2183/\" target=\"_blank\" hoverIndicator color={\"dark-1\"}/>\n                    <Anchor icon={<Github size='xlarge' />} href=\"https://github.com/ravijayaraman\" target=\"_blank\" hoverIndicator color={\"dark-1\"}/>\n                </Box>\n            </Nav>\n        );\n    }\n}\n\nexport default NavigationBar;","import React from 'react';\nimport { Grommet, Nav, Footer, Grid, Anchor, Box, Text, Heading, Avatar, Card, CardHeader, CardBody, Image, Button } from 'grommet';\nimport avatar from './img/main-avatar.svg';\nimport skills from './img/skills.png';\nimport goals from './img/career-goals.png';\nimport past_exp from './img/past-exp.png';\nimport current_proj from './img/current-projects.png'\n\nimport CardDetails from './components/cardDetails';\nimport NavigationBar from \"./components/navigationBar\";\n\nconst theme = {\n  global: {\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n      <Grommet theme={theme}>\n          <NavigationBar />\n          <Box class=\"box-container\" direction={\"row\"} height={\"medium\"} gap={\"medium\"} justify={\"center\"} margin={\"medium\"}>\n              <CardDetails title={\"Skills\"} image={skills} />\n              <CardDetails title={\"Career Goals\"} image={goals} />\n              <CardDetails title={\"Past Experience\"} image={past_exp} />\n              <CardDetails title={\"Current Projects\"} image={current_proj} />\n          </Box>\n          <Footer background=\"status-warning\" pad=\"small\">\n              <h3>Copyright Â© Ravi Jayaraman</h3>\n          </Footer>\n      </Grommet>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}